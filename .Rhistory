# geom_point() +
geom_path() +
geom_errorbar(aes(ymin = NDVI_mn - NDVI_sd, ymax = NDVI_mn + NDVI_sd), width = .2)
ggplot2::ggplot(outp, aes(x = rawdate, y = NDVI_mn, colour = surface)) +
ylab('NDVI') +
xlab('') +
geom_point( type =sensornr) +
geom_path() +
geom_errorbar(aes(ymin = NDVI_mn - NDVI_sd, ymax = NDVI_mn + NDVI_sd), width = .2)
head(outp)
ggplot2::ggplot(outp, aes(x = rawdate, y = NDVI_mn, colour = surface)) +
ylab('NDVI') +
xlab('') +
geom_point( shape = sensornr) +
geom_path() +
geom_errorbar(aes(ymin = NDVI_mn - NDVI_sd, ymax = NDVI_mn + NDVI_sd), width = .2)
ggplot2::ggplot(outp, aes(x = rawdate, y = NDVI_mn, colour = surface)) +
ylab('NDVI') +
xlab('') +
geom_point(outp,aes(x = rawdate, y = NDVI_mn, shape = sensornr)) +
geom_path() +
geom_errorbar(aes(ymin = NDVI_mn - NDVI_sd, ymax = NDVI_mn + NDVI_sd), width = .2)
ggplot2::ggplot(outp, aes(x = rawdate, y = NDVI_mn, colour = surface)) +
ylab('NDVI') +
xlab('') +
#geom_point(outp,aes(x = rawdate, y = NDVI_mn, shape = sensornr)) +
geom_path() +
geom_errorbar(aes(ymin = NDVI_mn - NDVI_sd, ymax = NDVI_mn + NDVI_sd), width = .2)
ggplot2::ggplot(outp, aes(x = rawdate, y = NDVI_mn, colour = surface, shape=sensornr)) +
ylab('NDVI') +
xlab('') +
#geom_point(outp,aes(x = rawdate, y = NDVI_mn, shape = sensornr)) +
geom_path() +
geom_errorbar(aes(ymin = NDVI_mn - NDVI_sd, ymax = NDVI_mn + NDVI_sd), width = .2)
ggplot2::ggplot(outp, aes(x = rawdate, y = NDVI_mn, colour = surface)) +
ylab('NDVI') +
xlab('') +
geom_point(outp,aes(x = rawdate, y = NDVI_mn, shape = sensornr)) +
geom_path() +
geom_errorbar(aes(ymin = NDVI_mn - NDVI_sd, ymax = NDVI_mn + NDVI_sd), width = .2)
ggplot2::ggplot(outp, aes(x = rawdate, y = NDVI_mn, colour = surface)) +
ylab('NDVI') +
xlab('') +
geom_point(shape = sensornr)) +
geom_path() +
geom_errorbar(aes(ymin = NDVI_mn - NDVI_sd, ymax = NDVI_mn + NDVI_sd), width = .2)
ggplot2::ggplot(outp, aes(x = rawdate, y = NDVI_mn, colour = surface)) +
ylab('NDVI') +
xlab('') +
geom_point(shape = sensornr) +
geom_path() +
geom_errorbar(aes(ymin = NDVI_mn - NDVI_sd, ymax = NDVI_mn + NDVI_sd), width = .2)
ggplot2::ggplot(outp, aes(x = rawdate, y = NDVI_mn, colour = surface)) +
ylab('NDVI') +
xlab('') +
geom_point(aes(shape = sensornr)) +
geom_path() +
geom_errorbar(aes(ymin = NDVI_mn - NDVI_sd, ymax = NDVI_mn + NDVI_sd), width = .2)
?CanHeMonR::create_overview_of_rasters
TerraBella_dir <- 'X:/Imagery/Granadilla/Skybox'
CanHeMonR::create_overview_of_rasters(TerraBella_dir)
ims_extent <- raster::shapefile(file.path(TerraBella_dir, 'images_overview.shp'))
plot(ims_exent, axes=T)
plot(ims_extent, axes=T)
raster::plot(ims_extent, axes=T)
so::plot(ims_extent, axes=T)
sp::plot(ims_extent, axes=T)
sp::plot(ims_extent, axes=T, main = 'outline of TerraBella scenes')
sp::plot(ims_extent, axes=T, main = 'outline of TerraBella scenes',fill='grey')
sp::plot(ims_extent, axes=T, main = 'outline of TerraBella scenes',col='grey')
sp::plot(ims_extent, axes=T, main = 'outline of TerraBella scenes',col=rgb (0.5,0.5,0.5,0.5))
sp::plot(ims_extent, axes=T, main = 'outline of TerraBella scenes',col=rgb (0.5,0.5,0.5,0.2))
?sp::plot
?plot
sp::plot(ims_extent, axes=T, main = 'outline of TerraBella scenes',col=rgb (0.5,0.5,0.5,0.2),line.col=0)
sp::plot(ims_extent, axes=T, main = 'outline of TerraBella scenes',col=rgb (0.5,0.5,0.5,0.2),border=0)
sp::plot(ims_extent, axes=T, main = 'outline of TerraBella scenes',col=rgb (0.5,0.5,0.5,0.2),border=NULL)
sp::plot(ims_extent, axes=T, main = 'outline of TerraBella scenes',col=rgb (0.5,0.5,0.5,0.2),border="transparent")
sp::plot(ims_extent, axes=T, main = 'outline of TerraBella scenes',col=rgb (0.5,0.5,0.5,0.1),border="transparent")
sp::plot(ims_extent, axes=T, main = 'outline of TerraBella scenes',col=rgb (0.5,0.5,0.5,0.08),border="transparent")
sp::plot(ims_extent, axes=T, main = 'outline of TerraBella scenes',col=rgb (0.5,0.5,0.5,0.1),border="transparent")
sp::plot(ims_extent, axes=T, main = 'density of TerraBella coverage',col=rgb (0.5,0.5,0.5,0.1),border="transparent")
projection(r)
raster::projection(r)
raster::projection(ims_extent)
sp::plot(ims_extent, axes=T, main = 'density of TerraBella coverage',col=rgb (0.5,0.5,0.5,0.1),border="transparent",
sub = raster::projection(ims_extent))
TerraBella_dir <- 'X:/Imagery/Granadilla/Skybox'
CanHeMonR::create_overview_of_rasters(TerraBella_dir)
?aes
dim(outp)
head(outp)
dim(outp$sensornr)
table(outp$sensornr)
calculate_TerraBella_indices  <- function(inp_tif_fnames, index_names, outp_dir, overwrite = T){
#the TerraBella band wavelengths in nm, taken from the specs page. The fifth band is PAN
TerBel_wavelengths <- cbind(c(450.0, 515.0),c(515.0, 595.0),c(605.0, 695.0),c(740.0, 900.0),c(NA,NA))
TerBel_wavelengths <- format((apply(TerBel_wavelengths,2,mean)),digits=6)
TerBel_wavelengths_names <- paste0('X',TerBel_wavelengths,'.Nanometers')
for (inp_tif_fname in inp_tif_fnames){
#read in the input filename
r <- raster::brick(inp_tif_fname)
#assign the wavelengths as layernames following Quantalab convention (e.g. X450.000000.Nanometers)
names(r) <- TerBel_wavelengths_names
as.numeric(unlist(lapply((strsplit(names(r),split="[X.]")),function(x){x[2]})))
#calculate the requested index
for (index_name in index_names){
#create the filename of the output
index_fname <- gsub('.tif',paste0('_NDVI','.tif'),basename(inp_tif_fname))
index_fname <- file.path(outp_dir,index_fname)
if (!(file.exists(index_fname)) | ((file.exists(index_fname)) & (overwrite == T))){
#calculate the index
#first retrieve the function for this index (code source: http://r.789695.n4.nabble.com/alternatives-to-do-call-when-namespace-is-attached-but-not-loaded-td4703774.html)
funct <- getExportedValue("CanHeMonR", index_name)
#now execute
raster::rasterOptions(progress = 'text')
do.call(funct, args = list(df=r, outp_fname = index_fname))
}
}
}
return()
}
inpdir <- 'X:/Imagery/Granadilla/Skybox'
fnames <- list.files(inpdir)
fnames <- fnames[grep('.tif',fnames)]
fnames <- fnames[substr(fnames,nchar(fnames)-3,nchar(fnames))==".tif"]
fnames <- file.path(inpdir, fnames)
raster::rasterOptions(progress='text')
calculate_TerraBella_indices(inp_tif_fnames = fnames, index_names='NDVI',overwrite = F,
outp_dir ="X:/Imagery/Granadilla/Skybox/spectral_indices")
raster::rasterOptions(tmpdir = 'E:/beckpie/temp/Raster_temp')
inpdir <- 'X:/Imagery/Granadilla/Skybox'
fnames <- list.files(inpdir)
fnames <- fnames[grep('.tif',fnames)]
fnames <- fnames[substr(fnames,nchar(fnames)-3,nchar(fnames))==".tif"]
fnames <- file.path(inpdir, fnames)
raster::rasterOptions(progress='text')
calculate_TerraBella_indices(inp_tif_fnames = fnames, index_names='NDVI',overwrite = F,
outp_dir ="X:/Imagery/Granadilla/Skybox/spectral_indices")
bare_soil_ext <- raster::extent(c(747720, 747730,4463970,4463980))
forest_ext <- raster::extent(c(748150, 748300, 4463800,4463900))
water_ext <-  raster::extent(c(746400,746700,4463100,4463200))
example_extents <- list(bare_soil = bare_soil_ext, water = water_ext, forest = forest_ext)
NDVIdir <- 'X:/Imagery/Granadilla/Skybox/spectral_indices'
NDVI_files <- list.files(NDVIdir)
NDVI_files <- NDVI_files[substr(NDVI_files,nchar(NDVI_files)-3,nchar(NDVI_files)) == '.tif']
NDVI_files <- file.path(NDVIdir, NDVI_files)
outp <- NULL
for (i in 1:length(example_extents)){
surf_ext <- example_extents[[i]]
imdates <- NULL
NDVI_mn <- NULL
NDVI_sd <- NULL
for (NDVI_file in NDVI_files){
r <- raster::raster(NDVI_file)
# if the raster and the extent overlap
if (!is.null(raster::intersect(raster::extent(r), surf_ext))){
NDVI_mn <- c(NDVI_mn, raster::extract(x = r, y = surf_ext, fun = mean))
NDVI_sd <- c(NDVI_sd, raster::extract(x = r, y = surf_ext, fun = sd))
imdates <- rbind(imdates,CanHeMonR::get_TerraBella_scene_date(tifname = NDVI_file))
}
}
outp1 <- cbind.data.frame(imdates, NDVI_mn, NDVI_sd, surface = names(example_extents)[i] )
if (is.null(outp)){
outp <- outp1
}else{
outp <- rbind.data.frame(outp, outp1)
}
}
outp <- outp[complete.cases(outp),]
outp <- outp[order(outp$surface, outp$rawdate), ]
require(ggplot2)
ggplot(outp, ggplot2::aes(x = rawdate, y = NDVI_mn, colour = surface)) +
ylab('NDVI') +
xlab('') +
geom_point(aes(shape = sensornr)) +
geom_path() +
geom_errorbar(ggplot2::aes(ymin = NDVI_mn - NDVI_sd, ymax = NDVI_mn + NDVI_sd), width = .2)
print(summary(outp))
library(CanHeMonR)
devtools::document()
library(CanHeMonR)
library(CanHeMonR)
crown_index_from_bigshape <- function(bigshape_fname, image_fname, flight_name., sensor., indices., outp_shp_fname,
tempfname ="E:/beckpie/temp/temp.shp", bandnames. = NULL){
#read in the bigshapefile
field_dat1 <- raster::shapefile(bigshape_fname)
indices. <- c("NDVI")
rows2calc <- slot(field_dat1,"data")
rows2calc <- which((rows2calc$sensor == sensor. ) & (rows2calc$flght_n==flight_name.))
pols2calc <- field_dat[rows2calc, ]
raster::shapefile(pols2calc, tempfname, overwrite = T)
#calculate the requested indices
require(CanHeMonR)
CanHeMonR::spectral_indices_for_crowns(crown_shp = tempfname, r_fname = image_fname, index_names = indices.,
outname = gsub(".shp","2.shp",tempfname) ,bandnames = bandnames.)
#open the temporary output
ind_shp <- raster::shapefile(gsub(".shp","2.shp",tempfname))
#add the indices to the attributes in the shp
field_dat. <- slot(field_dat1, "data")
#somehow the date format got lost. set it again MANUALLY
field_dat.$fw_date <- as.Date(field_dat.$fw_date)
field_dat.$flght_d <- as.Date(field_dat.$flght_d)
index_dat. <- slot(ind_shp, "data")
index_dat.$fw_date <- as.Date(index_dat.$fw_date)
index_dat.$flght_d <- as.Date(index_dat.$flght_d)
outp <- dplyr::full_join(field_dat., index_dat.)
#reassign the attributes to the shape
slot(field_dat1, "data") <- outp
raster::shapefile(field_dat1, filename = outp_shp_fname, overwrite = T)
#write away the output
return(field_dat1)
}
tt <- crown_index_from_bigshape(bigshape_fname = "E:/beckpie/temp/index_test.shp",
image_fname = flight5_hyper_fname,
flight_name. = 'flight5',
sensor. = 'hyper',
bandnames. = names(raster::brick('//ies.jrc.it/h03/CANHEMON/H03_CANHEMON/Imagery/Granadilla/Flight_5_151202_selected_area_rgb_hyper/151202_hyper/first_processing/151202_hyper_mosaic_rfl55_cut.bsq')),
indices. = 'NDVI',
outp_shp_fname = "E:/beckpie/temp/index_test2.shp",
tempfname ="E:/beckpie/temp/temp.shp")
#
crown_index_from_bigshape <- function(bigshape_fname, image_fname, flight_name., sensor., indices., outp_shp_fname,
tempfname ="E:/beckpie/temp/temp.shp", bandnames. = NULL){
#read in the bigshapefile
field_dat1 <- raster::shapefile(bigshape_fname)
indices. <- c("NDVI")
rows2calc <- slot(field_dat1,"data")
rows2calc <- which((rows2calc$sensor == sensor. ) & (rows2calc$flght_n==flight_name.))
pols2calc <- field_dat1[rows2calc, ]
raster::shapefile(pols2calc, tempfname, overwrite = T)
#calculate the requested indices
require(CanHeMonR)
CanHeMonR::spectral_indices_for_crowns(crown_shp = tempfname, r_fname = image_fname, index_names = indices.,
outname = gsub(".shp","2.shp",tempfname) ,bandnames = bandnames.)
#open the temporary output
ind_shp <- raster::shapefile(gsub(".shp","2.shp",tempfname))
#add the indices to the attributes in the shp
field_dat. <- slot(field_dat1, "data")
#somehow the date format got lost. set it again MANUALLY
field_dat.$fw_date <- as.Date(field_dat.$fw_date)
field_dat.$flght_d <- as.Date(field_dat.$flght_d)
index_dat. <- slot(ind_shp, "data")
index_dat.$fw_date <- as.Date(index_dat.$fw_date)
index_dat.$flght_d <- as.Date(index_dat.$flght_d)
outp <- dplyr::full_join(field_dat., index_dat.)
#reassign the attributes to the shape
slot(field_dat1, "data") <- outp
raster::shapefile(field_dat1, filename = outp_shp_fname, overwrite = T)
#write away the output
return(field_dat1)
}
tt <- crown_index_from_bigshape(bigshape_fname = "E:/beckpie/temp/index_test.shp",
image_fname = flight5_hyper_fname,
flight_name. = 'flight5',
sensor. = 'hyper',
bandnames. = names(raster::brick('//ies.jrc.it/h03/CANHEMON/H03_CANHEMON/Imagery/Granadilla/Flight_5_151202_selected_area_rgb_hyper/151202_hyper/first_processing/151202_hyper_mosaic_rfl55_cut.bsq')),
indices. = 'NDVI',
outp_shp_fname = "E:/beckpie/temp/index_test2.shp",
tempfname ="E:/beckpie/temp/temp.shp")
fw1date <- as.Date("2015-01-16")
fw2date <- as.Date("2015-12-16")
fw3date <- as.Date("2016-02-16")
## general information on flights
flight3date <- as.Date("2015-01-28")
flight4date <- as.Date("2015-07-27")
flight5date <- as.Date("2015-12-02")
flight3_hyper_fname <- '//ies.jrc.it/H03/CANHEMON/H03_CANHEMON/Imagery/Granadilla/Flight_3_150128_low-alt_hyper_thermal_cir/150128_hyper/150128_hyperspectral_empirical_line.bsq'
flight4_MCA_fname <- '//ies.jrc.it/H03/CANHEMON/H03_CANHEMON/Imagery/Granadilla/Flight_4_150727_low-alt_rgb_mca_thermal/150727_multispectral/150727_pinares_caceres_mca_rfl.bsq'
flight4_RGB_fname <- '//ies.jrc.it/H03/CANHEMON/H03_CANHEMON/Imagery/Granadilla/Flight_4_150727_low-alt_rgb_mca_thermal/150727_RGB/150727_RGB_reprocessed_photoscan.raw'
flight4_tir_fname <- '//ies.jrc.it/H03/CANHEMON/H03_CANHEMON/Imagery/Granadilla/Flight_4_150727_low-alt_rgb_mca_thermal/150727_RGB/150727_RGB_reprocessed_photoscan.raw'
flight5_hyper_fname <- '//ies.jrc.it/H03/CANHEMON/H03_CANHEMON/Imagery/Granadilla/Flight_5_151202_selected_area_rgb_hyper/151202_hyper/151202_rfl55_mosaic_cut_re-processed_EL'
flight5_RGB_fname <- '//ies.jrc.it/H03/CANHEMON/H03_CANHEMON/Imagery/Granadilla/Flight_5_151202_selected_area_rgb_hyper/151202_hyper/151202_rfl55_mosaic_cut_re-processed_EL'
tt <- crown_index_from_bigshape(bigshape_fname = "E:/beckpie/temp/index_test.shp",
image_fname = flight5_hyper_fname,
flight_name. = 'flight5',
sensor. = 'hyper',
bandnames. = names(raster::brick('//ies.jrc.it/h03/CANHEMON/H03_CANHEMON/Imagery/Granadilla/Flight_5_151202_selected_area_rgb_hyper/151202_hyper/first_processing/151202_hyper_mosaic_rfl55_cut.bsq')),
indices. = 'NDVI',
outp_shp_fname = "E:/beckpie/temp/index_test2.shp",
tempfname ="E:/beckpie/temp/temp.shp")
NDVI
get_band_of_wavelength()
get_band_of_wavelength
index_names
colnames(r_crown_vals)
tt <- crown_index_from_bigshape(bigshape_fname = "E:/beckpie/temp/index_test.shp",
image_fname = flight5_hyper_fname,
flight_name. = 'flight5',
sensor. = 'hyper',
bandnames. = names(raster::brick('//ies.jrc.it/h03/CANHEMON/H03_CANHEMON/Imagery/Granadilla/Flight_5_151202_selected_area_rgb_hyper/151202_hyper/first_processing/151202_hyper_mosaic_rfl55_cut.bsq')),
indices. = 'NDVI',
outp_shp_fname = "E:/beckpie/temp/index_test2.shp",
tempfname ="E:/beckpie/temp/temp.shp")
index_names
head(r_crown_vals_df)
index_names
r
head(r_crown_vals)
crown_pols
head(r_crown_vals)
r_crown_vals_df <- cbind.data.frame(r_crown_vals_df,as.data.frame(r_crown_vals))
head(r_crown_vals_df)
index_names
index_name <- "NDVI"
calculated_index <- get(index_name)(df = r_crown_vals)
calculated_index
r_crown_vals_df <- cbind.data.frame(r_crown_vals_df,calculated_index)
colnames(r_crown_vals_df)[ncol(r_crown_vals_df)] <- index_name
crown_centers <- rgeos::gCentroid(crown_pols, byid=TRUE)
crown_centers <- sp::SpatialPointsDataFrame(crown_centers, data = r_crown_vals_df)
raster::shapefile(x = crown_centers, filename = outname, overwrite=T)
colnames(crown_centers)
colnames(r_crown_vals_df)
r_crown_vals_df[[-NDVI]]
r_crown_vals_df[[-"NDVI"]]
tt<-dplyr::select(r_crown_vals_df,-NDVI)
tt<-dplyr::select(r_crown_vals,-NDVI)
head(r_crown_vals)
r_crown_vals_df <- slot(crown_pols,"data")
tt<-dplyr::select(r_crown_vals_df,-NDVI)
head(tt)
head(r_crown_vals_df)
tt<-dplyr::select(r_crown_vals_df,-index_names)
tt<-dplyr::select(r_crown_vals_df,-get(index_names))
head9tt
head(tt)
index_names <- c("NDVI","X800_00")
tt<-dplyr::select(r_crown_vals_df,-get(index_names))
head(tt)
index_names
head(r_crown_vals_df)
tt<-dplyr::select(r_crown_vals_df,-one_of(index_names))
tt<-dplyr::select(r_crown_vals_df,-dplyr::one_of(index_names))
head(tt)
index_names %in% colnames(r_crown_vals_df)
index_names[index_names %in% colnames(r_crown_vals_df)]
index_names[index_names %in% 0]
length(index_names[index_names %in% 0])
pre_existing_indices <- index_names[index_names %in% colnames(r_crown_vals_df)]
pre_existing_indices
print(pre_existing_indices)
index_names <-  "NDVI"
pre_existing_indices <- index_names[index_names %in% colnames(r_crown_vals_df)]
if (length(pre_existing_indices)){
cat('The following indices were already present in the attributes and will be overwritten!:\n')
print(pre_existing_indices)
r_crown_vals_df <- dplyr::select(r_crown_vals_df,-dplyr::one_of(index_names))
}
colnames(r_crown_vals_df)
pre_existing_indices
length(pre_existing_indices) > 0
print(pre_existing_indices)
r_crown_vals_df <- dplyr::select(r_crown_vals_df,-dplyr::one_of(index_names))
colnames(r_crown_vals_df)
r_crown_vals_df <- cbind.data.frame(r_crown_vals_df,as.data.frame(r_crown_vals))
colnames(r_crown_vals_df)
index_name <- NDVI
calculated_index <- get(index_name)(df = r_crown_vals)
index_name <- "NDVI"
calculated_index <- get(index_name)(df = r_crown_vals)
r_crown_vals_df <- cbind.data.frame(r_crown_vals_df,calculated_index)
colnames(r_crown_vals_df)[ncol(r_crown_vals_df)] <- index_name
head(r_crown_vals_df)
crown_centers <- rgeos::gCentroid(crown_pols, byid=TRUE)
crown_centers <- sp::SpatialPointsDataFrame(crown_centers, data = r_crown_vals_df)
raster::shapefile(x = crown_centers, filename = outname, overwrite=T)
cat('Wrote away ', outname, '\n')
ind_shp <- raster::shapefile(gsub(".shp","2.shp",tempfname))
tempfname ="E:/beckpie/temp/temp.shp"
ind_shp <- raster::shapefile(gsub(".shp","2.shp",tempfname))
field_dat. <- slot(field_dat1, "data")
bigshape_fname <- 'E:/beckpie/temp/master_field_data.shp'
bigshape_fname = "E:/beckpie/temp/index_test.shp"
outp_shp_fname = "E:/beckpie/temp/index_test2.shp"
tempfname ="E:/beckpie/temp/temp.shp"
field_dat1 <- raster::shapefile(bigshape_fname)
ind_shp
field_dat. <- slot(field_dat1, "data")
field_dat.$fw_date <- as.Date(field_dat.$fw_date)
field_dat.$flght_d <- as.Date(field_dat.$flght_d)
head(field_dat.)
index_dat. <- slot(ind_shp, "data")
head(index_dat.)
index_dat.$fw_date <- as.Date(index_dat.$fw_date)
index_dat.$flght_d <- as.Date(index_dat.$flght_d)
outp <- dplyr::full_join(field_dat., index_dat.)
head(outp)
table(is.na(NDVI))
table(is.na(outp$NDVI))
dim(index_dat.)
table(is.na(field_dat.$NDVI))
669+483
slot(field_dat1, "data") <- outp
outp_shp_fname
raster::shapefile(field_dat1, filename = outp_shp_fname, overwrite = T)
field_dat1
dim(outp)
dim(field_dat.)
outp <- dplyr::left_join(field_dat., index_dat.)
dim(outp)
table(is.na(outp$NDVI))
colnames(outp)
?dplyr::left_join
head(field_dat.)
head(index_dat.)
outp <- dplyr::left_join(field_dat., index_dat., by = 'spID')
dim(outp)
table(is.na(outp$NDVI))
colnames(outer())
colnames(outp)
colnames(field_dat.)
intersect(colnames(field_dat.),colnames(index_dat.))
?intersect
setdiff(colnames(field_dat.),colnames(index_dat.))
setdiff(intersect(colnames(field_dat.),colnames(index_dat.)), indices.)
indices. <- "NDVI"
setdiff(intersect(colnames(field_dat.),colnames(index_dat.)), indices.)
dplyr::left_join()
dplyr::left_join
?dplyr::left_join
paste0('X',1:10)
grep(paste0('X',1:10),colnames(index_dat.))
grepl(paste0('X',1:10),colnames(index_dat.))
grepl(paste0('X',1:10),colnames(index_dat.),fixed=T)
unique(grep(paste(paste0('X',1:10), collapse="|"),colnames(index_dat.),value=T)
)
represented_band_names <- unique(grep(paste(paste0('X',1:10), collapse="|"),colnames(index_dat.),value=T))
columns_NOT_to_join_by <- c(indices.,represented_band_names)
columns_to_join_by <- setdiff(intersect(colnames(field_dat.),colnames(index_dat.)), columns_NOT_to_join_by)
columns_to_join_by
outp <- dplyr::left_join(field_dat., index_dat., by = columns_to_join_by)
head(outp)
table(is.na(outp$NDVI.x))
table(is.na(outp$NDVI.y))
tt<-outp$NDVI.x
tty<-outp$NDVI.x
table(is.na(tt),is.na(tt.y))
table(is.na(tt),is.na(tty))
tt[is.na(tt)] <- tty[is.na(tt)]
table(is.na(tt))
indicex.
indices.
duplic_index <- "NDVI"
(paste0(duplic_index.y)) %in% colnames(outp)
((paste0(duplic_index,'.y')) %in% colnames(outp))
((paste0(duplic_index,'.x')) %in% colnames(outp))
consolidate <- dplyr::select(outp, starts_with(paste0(duplic_index,".")))
consolidate <- dplyr::select(outp, dplyr::starts_with(paste0(duplic_index,".")))
head(consolidate)
index.x <- dplyr::select(outp, paste0(duplic_index,".x"))
paste0(duplic_index,".x")
index.x <- dplyr::select(outp, get(paste0(duplic_index,".x")))
table(is.na(index.x))
index.y <- dplyr::select(outp, get(paste0(duplic_index,".x")))
table(is.na(index.y))
index.y <- dplyr::select(outp, get(paste0(duplic_index,".y")))
table(is.na(index.y))
index.x[is.na(index.x)] <- index.y[is.na(index.y)]
index.x[is.na(index.x)] <- index.y[is.na(index.x)]
table(is.na(index.x))
outp[[duplic_index]] <- index.x
colnames(outp)
paste0(duplic_index,c(".x",".y"))
outp <- dplyr::select(outp, - get(paste0(duplic_index,c(".x",".y"))))
colnames(outp)
et(paste0(duplic_index,c(".x",".y")))
et(paste0(duplic_index,c(".x",".y")))g
get(paste0(duplic_index,c(".x",".y")))g
get(paste0(duplic_index,c(".x",".y")))
paste0(duplic_index,c(".x",".y"))
outp <- dplyr::select(outp, - starts_with(paste0(duplic_index,c(".x",".y"))))
outp <- dplyr::select(outp, - dplyr::starts_with(paste0(duplic_index,c(".x",".y"))))
paste0(duplic_index,c(".x",".y"))
outp <- dplyr::select(outp, - dplyr::one_off(paste0(duplic_index,c(".x",".y"))))
outp <- dplyr::select(outp, - dplyr::one_of(paste0(duplic_index,c(".x",".y"))))
outp <- dplyr::left_join(field_dat., index_dat., by = columns_to_join_by)
(paste0(duplic_index,'.y')) %in% colnames(outp)
index.x <- dplyr::select(outp, get(paste0(duplic_index,".x")))
index.y <- dplyr::select(outp, get(paste0(duplic_index,".y")))
index.x[is.na(index.x)] <- index.y[is.na(index.x)]
#add the consolidated index values
outp[[duplic_index]] <- index.x
#remove the original duplicates
outp <- dplyr::select(outp, - dplyr::one_of(paste0(duplic_index,c(".x",".y"))))
colnames(outp)
slot(field_dat1, "data") <- outp
outp_shp_fname
raster::shapefile(field_dat1, filename = outp_shp_fname, overwrite = T)
head(field_dat1)
names(field_dat1)
head(slot(field_dat1,"data")
)
head(outp)
colnames(outp)
slot(field_dat1, "data") <- outp
head(outp)
outp[1,]
colnames(outp)
outp <- dplyr::select(outp, - dplyr::one_of(paste0(duplic_index,c(".x",".y"))))
str(outp)
outp[[duplic_index]] <- as.vector(index.x)
str(outp)
outp[[duplic_index]] <- as.numeric(index.x)
index.x
outp[[duplic_index]] <- as.numeric(as.vector((index.x)))
as.vector((index.x))
outp[[duplic_index]] <- as.numeric(unlist(index.x))
head(outp)
slot(field_dat1, "data") <- outp
raster::shapefile(field_dat1, filename = outp_shp_fname, overwrite = T)
library(CanHeMonR)
